import React, { useState, useEffect, useCallback } from 'react'
import { useTranslation } from 'react-i18next'
import { DollarSign, Printer } from 'react-feather'
import { Layout, Main } from '../../components/layout/Index'
import { DataTable } from '../../components/table/Index'
import { Text } from '../../components/text/Text'
import { SuccessButton, GrayButton, PrimaryButton } from '../../components/button/Index'
import { Container } from '../../components/container/Index'
import { Card } from '../../components/card/Index'
import { Loader } from '../../components/loading/Index'
import { NoContent } from '../../components/204/NoContent'
import { NetworkError } from '../../components/501/NetworkError'
import { PrimaryModal } from '../../components/modal/PrimaryModal'
import { Requests } from '../../utils/Http/Index'
import { Toastify } from '../../components/toastify/Toastify'
import { WithdrawForm } from '../../components/form/WithdrawForm'
import { NoticeForm } from '../../components/form/NoticeForm'
import { useForm } from 'react-hook-form'
import { dateFormate } from '../../utils/_heplers'
import { FormGroup } from '../../components/formGroup/FormGroup'
import { DatePicker } from '../../components/datePicker/Index'

const Index = () => {
  const { t } = useTranslation()
  const [data, setData] = useState([])
  const [loading, setLoading] = useState(false)
  const [isSelectedPerson, setSelectPerson] = useState({ show: false, loading: false })

  const { register, handleSubmit, setError, clearErrors, formState: { errors } } = useForm()
  const [date, setDate] = useState(new Date())
  const [selectedData, setSelectedData] = useState(null)

  // get Selected modal Data
  const getSelectedData = data => setSelectedData(data)

  // Handle search suggestion
  const handleSuggestion = async (value) => {
    let data = {
      results: null,
      message: null
    }
    const response = await Requests.IMEI.SearchSeparateProductCode(value)
    if (response.status === 200) {
      const resultItems = []
      if (response.data.data && response.data.data.length) {
        for (let i = 0; i < response.data.data.length; i++) {
          const element = response.data.data[i]
          resultItems.push(element.name)
        }
        data.results = resultItems
      } else {
        data.message = t("No results found")
      }
    } else {
      data.message = t("No results found")
    }

    return data
  }

  // Handle withdraw submission
  const handleWithdrawSubmission = async (data) => {
    try {
        setSelectPerson({ ...isSelectedPerson, loading: true })
        console.log(data)

        setTimeout(() => {
            setSelectPerson({ value: null, loading: false, show: false })
            Toastify.Success("Successfully working in dummy.")
        }, 2000)
    } catch (error) {
        if (error) {
            setSelectPerson({ ...isSelectedPerson, loading: false })
            Toastify.Error("Network Error.")
        }
    }
}

  // Handle withdraw submission
  const handleNoticeSubmission = async (data) => {

    if (!date) {
      setError("date", {
        type: "manual",
        message: "Date is required."
      })
    }

    clearErrors()
    const formData = {
      ...data,
      date: dateFormate(date)
    }

    try {
      setLoading(true)
      console.log(formData)

      setTimeout(() => {
        setLoading(false)
        Toastify.Success("Successfully working in dummy.")
      }, 2000)
    } catch (error) {
      if (error) {
        setLoading(false)
        Toastify.Error("Network Error.")
      }
    }
  }

  // datatable custom styles
  const customStyles = {
    rows: {
      style: {
        minHeight: '60px',
      }
    }
  }

  const tdWidth = { width: 140 }
  const tdWidthSm = { width: 70 }

  return (
    <div>
      <Layout
        page={t("dashboard / notice management")}
        message={t("All notices are provided from here")}
        container="container-fluid"
        button={
          <div>
            <GrayButton
              type="button"
              className="ml-2 mt-2 mt-sm-0"
              onClick={() => window.print()}
            >
              <Printer size={15} style={{ marginRight: 5 }} />
              <span style={{ fontSize: 13 }}>{t('PRINT')}</span>
            </GrayButton>
          </div>
        }
      />

      <Main>
        {/* {loading && !serverError && !data.length ? <Loader /> : null}
        {!loading && !data.length && !serverError ? <NoContent message="No notice available." /> : null}
        {!loading && !data.length && serverError ? <NetworkError message="Network Error." /> : null} */}
        <Container.Column>
          {/* <NoticeForm
              loading={loading}
              onSubmit={handleNoticeSubmission}
            /> */}

          <form onSubmit={handleSubmit(handleNoticeSubmission)}>

            <Container.Column className="mb-4 p-0">
              <PrimaryButton
                type="button"
                className="px-4"
                onClick={()=> setSelectPerson({ ...isSelectedPerson, show: true })}
              ><Text className="fs-15 mb-0">{t('Please select the persons')}</Text></PrimaryButton>
            </Container.Column>

            {/* Date */}
            <Container.Column className="col-lg-6 p-0">
              <FormGroup>
                {errors.date && errors.date.message ?
                  <Text className="text-danger fs-13 mb-1">{errors.date && errors.date.message}</Text> :
                  <Text className="text-capitalize fs-13 mb-1">{t('Date')}</Text>
                }

                <DatePicker
                  deafultValue={date}
                  selected={data => {
                    setDate(data)
                    clearErrors("date")
                  }}
                />
              </FormGroup>
            </Container.Column>

            {/*  Notice box */}
            <Container.Column className="p-0">
              <FormGroup>
                {errors.notice_box && errors.notice_box.message ?
                  <Text className="text-danger fs-13 mb-1">{errors.notice_box && errors.notice_box.message}</Text>
                  : <Text className="fs-13 mb-0">{t(" Notice box ")} <span className='text-muted'> (optional)</span> </Text>}

                <textarea
                  rows="3"
                  className={errors.notice_box ? "form-control shadow-none error" : "form-control shadow-none"}
                  placeholder={t("Enter notice details")}
                  {...register("notice_box")}
                // defaultValue={props.penalty && props.penalty.description ? props.penalty.description : ""}
                />
              </FormGroup>
            </Container.Column>

            {/* Submit button */}
            <div className="text-right">
              <PrimaryButton
                type="submit"
                className="px-4"
                disabled={loading}
              >{loading ? "LOADING..." : "SUBMIT"}</PrimaryButton>
            </div>
          </form>
        </Container.Column>
      </Main>

      {/* Create withraw modal */}
      <PrimaryModal
        title={t(`Please select the persons`)}
        show={isSelectedPerson.show}
        size="xl"
        onHide={() => setSelectPerson({ show: false, loading: false })}
      >
        {/* <WithdrawForm
          loading={isSelectedPerson.loading}
          onSubmit={handleWithdrawSubmission}
          onHide={() => setSelectPerson({ show: false, loading: false })}
        /> */}

        <NoticeForm 
        data={getSelectedData}
        />
      </PrimaryModal>

    </div>
  );
};

export default Index;